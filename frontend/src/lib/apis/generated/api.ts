/* tslint:disable */
/* eslint-disable */
/**
 * Messages API
 * メッセージとリアクション、画像、実績を管理するAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Achievement
 */
export interface Achievement {
    /**
     * 実績ID
     * @type {number}
     * @memberof Achievement
     */
    'id': number;
    /**
     * 実績名
     * @type {string}
     * @memberof Achievement
     */
    'name': string;
    /**
     * 実績達成日時
     * @type {string}
     * @memberof Achievement
     */
    'achievedAt': string;
}
/**
 * 
 * @export
 * @interface AchievementsPostRequest
 */
export interface AchievementsPostRequest {
    /**
     * 実績名
     * @type {string}
     * @memberof AchievementsPostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * メッセージID
     * @type {string}
     * @memberof Message
     */
    'id': string;
    /**
     * 投稿者のtraqID
     * @type {string}
     * @memberof Message
     */
    'author': string;
    /**
     * メッセージ本文
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * 添付画像のID
     * @type {string}
     * @memberof Message
     */
    'imageId': string | null;
    /**
     * 
     * @type {Reactions}
     * @memberof Message
     */
    'reactions': Reactions;
    /**
     * 返信数
     * @type {number}
     * @memberof Message
     */
    'replyCount': number;
    /**
     * 作成日時
     * @type {string}
     * @memberof Message
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface MessageDetail
 */
export interface MessageDetail {
    /**
     * メッセージID
     * @type {string}
     * @memberof MessageDetail
     */
    'id': string;
    /**
     * 投稿者のtraqID
     * @type {string}
     * @memberof MessageDetail
     */
    'author': string;
    /**
     * メッセージ本文
     * @type {string}
     * @memberof MessageDetail
     */
    'content': string;
    /**
     * 添付画像のID
     * @type {string}
     * @memberof MessageDetail
     */
    'imageId': string | null;
    /**
     * 
     * @type {Reactions}
     * @memberof MessageDetail
     */
    'reactions': Reactions;
    /**
     * 返信一覧
     * @type {Array<Reply>}
     * @memberof MessageDetail
     */
    'replies': Array<Reply>;
    /**
     * 作成日時
     * @type {string}
     * @memberof MessageDetail
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Reactions
 */
export interface Reactions {
    /**
     * リアクション数
     * @type {number}
     * @memberof Reactions
     */
    'count': number;
    /**
     * 自分がリアクションしているかどうか
     * @type {boolean}
     * @memberof Reactions
     */
    'myReaction': boolean;
}
/**
 * 
 * @export
 * @interface Reply
 */
export interface Reply {
    /**
     * 返信ID
     * @type {string}
     * @memberof Reply
     */
    'id': string;
    /**
     * 投稿者のtraqID
     * @type {string}
     * @memberof Reply
     */
    'author': string;
    /**
     * 返信本文
     * @type {string}
     * @memberof Reply
     */
    'content': string;
    /**
     * 添付画像のID
     * @type {string}
     * @memberof Reply
     */
    'images': string | null;
    /**
     * 
     * @type {Reactions}
     * @memberof Reply
     */
    'reactions': Reactions;
    /**
     * 作成日時
     * @type {string}
     * @memberof Reply
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * ユーザーのtraqID
     * @type {string}
     * @memberof UserInfo
     */
    'traqId': string;
}

/**
 * AchievementsApi - axios parameter creator
 * @export
 */
export const AchievementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 実績一覧の取得
         * @param {string} [traqId] 特定のユーザーの実績のみを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementsGet: async (traqId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/achievements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (traqId !== undefined) {
                localVarQueryParameter['traqId'] = traqId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 実績の作成
         * @param {AchievementsPostRequest} achievementsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementsPost: async (achievementsPostRequest: AchievementsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'achievementsPostRequest' is not null or undefined
            assertParamExists('achievementsPost', 'achievementsPostRequest', achievementsPostRequest)
            const localVarPath = `/achievements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(achievementsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AchievementsApi - functional programming interface
 * @export
 */
export const AchievementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AchievementsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 実績一覧の取得
         * @param {string} [traqId] 特定のユーザーの実績のみを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementsGet(traqId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Achievement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementsGet(traqId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AchievementsApi.achievementsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 実績の作成
         * @param {AchievementsPostRequest} achievementsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementsPost(achievementsPostRequest: AchievementsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Achievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementsPost(achievementsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AchievementsApi.achievementsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AchievementsApi - factory interface
 * @export
 */
export const AchievementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AchievementsApiFp(configuration)
    return {
        /**
         * 
         * @summary 実績一覧の取得
         * @param {string} [traqId] 特定のユーザーの実績のみを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementsGet(traqId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Achievement>> {
            return localVarFp.achievementsGet(traqId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 実績の作成
         * @param {AchievementsPostRequest} achievementsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementsPost(achievementsPostRequest: AchievementsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Achievement> {
            return localVarFp.achievementsPost(achievementsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AchievementsApi - object-oriented interface
 * @export
 * @class AchievementsApi
 * @extends {BaseAPI}
 */
export class AchievementsApi extends BaseAPI {
    /**
     * 
     * @summary 実績一覧の取得
     * @param {string} [traqId] 特定のユーザーの実績のみを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementsApi
     */
    public achievementsGet(traqId?: string, options?: RawAxiosRequestConfig) {
        return AchievementsApiFp(this.configuration).achievementsGet(traqId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 実績の作成
     * @param {AchievementsPostRequest} achievementsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementsApi
     */
    public achievementsPost(achievementsPostRequest: AchievementsPostRequest, options?: RawAxiosRequestConfig) {
        return AchievementsApiFp(this.configuration).achievementsPost(achievementsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定されたIDの画像を取得
         * @param {string} id 画像ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imagesIdGet', 'id', id)
            const localVarPath = `/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定されたIDの画像を取得
         * @param {string} id 画像ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImagesApi.imagesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定されたIDの画像を取得
         * @param {string} id 画像ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.imagesIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @summary 指定されたIDの画像を取得
     * @param {string} id 画像ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public imagesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ImagesApiFp(this.configuration).imagesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary メッセージ一覧の取得
         * @param {number} [limit] 取得する件数の上限
         * @param {number} [offset] 取得開始位置
         * @param {string} [traqId] 特定のユーザーのメッセージのみを取得
         * @param {boolean} [includeReplies] 返信を含めるかどうか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesGet: async (limit?: number, offset?: number, traqId?: string, includeReplies?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (traqId !== undefined) {
                localVarQueryParameter['traqId'] = traqId;
            }

            if (includeReplies !== undefined) {
                localVarQueryParameter['includeReplies'] = includeReplies;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのメッセージの詳細を取得
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('messagesIdGet', 'id', id)
            const localVarPath = `/messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージからリアクションを削除
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesIdReactionsDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('messagesIdReactionsDelete', 'id', id)
            const localVarPath = `/messages/{id}/reactions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージにリアクションを追加
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesIdReactionsPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('messagesIdReactionsPost', 'id', id)
            const localVarPath = `/messages/{id}/reactions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージの投稿
         * @param {string} message メッセージ本文
         * @param {string} [repliesTo] 返信先のメッセージID
         * @param {File} [image] 添付画像
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost: async (message: string, repliesTo?: string, image?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'message' is not null or undefined
            assertParamExists('messagesPost', 'message', message)
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (message !== undefined) { 
                localVarFormParams.append('message', message as any);
            }
    
            if (repliesTo !== undefined) { 
                localVarFormParams.append('repliesTo', repliesTo as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary メッセージ一覧の取得
         * @param {number} [limit] 取得する件数の上限
         * @param {number} [offset] 取得開始位置
         * @param {string} [traqId] 特定のユーザーのメッセージのみを取得
         * @param {boolean} [includeReplies] 返信を含めるかどうか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesGet(limit?: number, offset?: number, traqId?: string, includeReplies?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesGet(limit, offset, traqId, includeReplies, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.messagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 指定されたIDのメッセージの詳細を取得
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.messagesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary メッセージからリアクションを削除
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesIdReactionsDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesIdReactionsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.messagesIdReactionsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary メッセージにリアクションを追加
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesIdReactionsPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesIdReactionsPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.messagesIdReactionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary メッセージの投稿
         * @param {string} message メッセージ本文
         * @param {string} [repliesTo] 返信先のメッセージID
         * @param {File} [image] 添付画像
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesPost(message: string, repliesTo?: string, image?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesPost(message, repliesTo, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.messagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * 
         * @summary メッセージ一覧の取得
         * @param {number} [limit] 取得する件数の上限
         * @param {number} [offset] 取得開始位置
         * @param {string} [traqId] 特定のユーザーのメッセージのみを取得
         * @param {boolean} [includeReplies] 返信を含めるかどうか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesGet(limit?: number, offset?: number, traqId?: string, includeReplies?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<Message>> {
            return localVarFp.messagesGet(limit, offset, traqId, includeReplies, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのメッセージの詳細を取得
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageDetail> {
            return localVarFp.messagesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メッセージからリアクションを削除
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesIdReactionsDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Reactions> {
            return localVarFp.messagesIdReactionsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メッセージにリアクションを追加
         * @param {string} id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesIdReactionsPost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Reactions> {
            return localVarFp.messagesIdReactionsPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メッセージの投稿
         * @param {string} message メッセージ本文
         * @param {string} [repliesTo] 返信先のメッセージID
         * @param {File} [image] 添付画像
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost(message: string, repliesTo?: string, image?: File, options?: RawAxiosRequestConfig): AxiosPromise<MessageDetail> {
            return localVarFp.messagesPost(message, repliesTo, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * 
     * @summary メッセージ一覧の取得
     * @param {number} [limit] 取得する件数の上限
     * @param {number} [offset] 取得開始位置
     * @param {string} [traqId] 特定のユーザーのメッセージのみを取得
     * @param {boolean} [includeReplies] 返信を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesGet(limit?: number, offset?: number, traqId?: string, includeReplies?: boolean, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).messagesGet(limit, offset, traqId, includeReplies, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのメッセージの詳細を取得
     * @param {string} id メッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).messagesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メッセージからリアクションを削除
     * @param {string} id メッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesIdReactionsDelete(id: string, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).messagesIdReactionsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メッセージにリアクションを追加
     * @param {string} id メッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesIdReactionsPost(id: string, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).messagesIdReactionsPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メッセージの投稿
     * @param {string} message メッセージ本文
     * @param {string} [repliesTo] 返信先のメッセージID
     * @param {File} [image] 添付画像
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesPost(message: string, repliesTo?: string, image?: File, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).messagesPost(message, repliesTo, image, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 自身の情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 自身の情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.meGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary 自身の情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet(options?: RawAxiosRequestConfig): AxiosPromise<UserInfo> {
            return localVarFp.meGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 自身の情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public meGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).meGet(options).then((request) => request(this.axios, this.basePath));
    }
}



